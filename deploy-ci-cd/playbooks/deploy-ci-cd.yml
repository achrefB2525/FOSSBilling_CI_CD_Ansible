---
- name: Déploiement complet CI/CD avec Jenkins, SonarQube, Nexus, PostgreSQL et installation de Trivy
  hosts: localhost
  vars_files:
    - vars/passwordvars.yml
  tasks:

    - name: Activer l'addon Ingress de Minikube
      shell: minikube addons enable ingress
      register: result_ingress_enable
      failed_when: "'Error' in result_ingress_enable.stderr"
      changed_when: "'enabled' in result_ingress_enable.stdout"

    - name: Apply Cert-Manager CRDs
      command: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.17.2/cert-manager.crds.yaml
      register: crds_apply
      changed_when: "'created' in crds_apply.stdout or 'unchanged' in crds_apply.stdout"

    # Ajouter le repository Helm de Cert-Manager
    - name: Add Helm repository for Cert-Manager
      command: helm repo add jetstack https://charts.jetstack.io --force-update
      register: helm_repo_add
      changed_when: "'already exists' not in helm_repo_add.stdout"

    # Installer Cert-Manager avec Helm
    - name: Install Cert-Manager with Helm
      command: helm install cert-manager --namespace cert-manager --version v1.17.2 jetstack/cert-manager
      register: cert_manager_install
      changed_when: "'installed' in cert_manager_install.stdout or 'updated' in cert_manager_install.stdout"

    # Vérifier l'installation de Cert-Manager
    - name: Verify Cert-Manager pods are running
      command: kubectl get pods --namespace cert-manager -l app.kubernetes.io/name=cert-manager
      register: cert_manager_check
      failed_when: false
      changed_when: false

    - name: Display Cert-Manager Pod status
      debug:
        msg: "Cert-Manager Pods: {{ cert_manager_check.stdout }}"

    # Vérifier si les CRDs sont correctement appliquées
    - name: Check if Cert-Manager CRDs are installed
      command: kubectl get crd | grep cert-manager
      register: crds_check
      failed_when: false
      changed_when: false

    - name: Display CRDs status
      debug:
        msg: "Cert-Manager CRDs: {{ crds_check.stdout }}"
        
    - name: Déployer Jenkins depuis jenkinsdeploy.yaml
      command: kubectl apply -f {{ deploy_path }}/deploy-ci-cd/jenkins-conf/jenkinsdeploy.yaml

    - name: ADD Role to Jenkins
      command: kubectl apply -f {{ deploy_path }}/deploy-ci-cd/roleManager/Jenkinsrole.yaml

    - name: Récupérer l'IP ClusterIP du service Jenkins
      command: kubectl get svc jenkins -n jenkins -o jsonpath='{.spec.clusterIP}'
      register: jenkins_ip

    - name: Définir la variable jenkins_url
      set_fact:
        jenkins_url: "http://{{ jenkins_ip.stdout }}:8080"

    - name: Debug - Afficher l'URL de Jenkins
      debug:
        var: jenkins_url

    - name: Inclure les tâches de déploiement de PostgreSQL
      command: kubectl apply -f {{ deploy_path }}/deploy-ci-cd/sonarqubedeploy/postgres.yaml

    - name: Déployer SonarQube depuis sonar.yaml
      command: kubectl apply -f {{ deploy_path }}/deploy-ci-cd/sonarqubedeploy/sonar.yaml

#    - name: Déployer Nexus depuis deplo_nexus.yaml
#      command: kubectl apply -f {{ deploy_path }}/deploy-ci-cd/nexus/deplo_nexus.yaml

    - name: Ajouter un délai de 60 secondes
      pause:
        seconds: 200

    - name: Inclure les tâches pour la gestion des plugins Jenkins
      include_tasks: "{{ deploy_path }}/deploy-ci-cd/jenkins-conf/mangerPlugins.yml"

