- name: Installer Docker, Minikube et cri-dockerd
  hosts: localhost
  vars:
    docker_version: "5:20.10.24~3-0~ubuntu-focal"
    minikube_version: "1.35.0"
    kubectl_version: "1.32.0"
    user_home: "/home/achref"
    user_name: "achref"

  tasks:

    - name: Installer les dépendances système
      apt:
        name:
          - curl
          - apt-transport-https
          - ca-certificates
          - software-properties-common
          - python3-pip
          - conntrack
          - socat
          - ebtables
          - iptables
        state: present

    - name: Installer OpenJDK 17
      apt:
        name: openjdk-17-jdk
        state: present
        update_cache: yes

    - name: Ajouter la clé GPG Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Ajouter le dépôt Docker
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
        update_cache: yes

    - name: Installer Docker CE
      apt:
        name:
          - "docker-ce={{ docker_version }}"
          - "docker-ce-cli={{ docker_version }}"
          - containerd.io
        state: present

    - name: Redémarrer Docker
      systemd:
        name: docker
        state: restarted
        enabled: true

    - name: Ajouter l’utilisateur {{ user_name }} au groupe docker
      user:
        name: "{{ user_name }}"
        groups: docker
        append: yes

    - name: Installer le SDK Docker pour Python
      pip:
        name: docker
        executable: pip3

    - name: Télécharger et installer crictl
      block:
        - name: Télécharger crictl
          get_url:
            url: "https://github.com/kubernetes-sigs/cri-tools/releases/download/v{{ kubectl_version }}/crictl-v{{ kubectl_version }}-linux-amd64.tar.gz"
            dest: "/tmp/crictl.tar.gz"

        - name: Extraire crictl
          unarchive:
            src: "/tmp/crictl.tar.gz"
            dest: "/usr/local/bin/"
            remote_src: yes

        - name: Rendre crictl exécutable
          file:
            path: "/usr/local/bin/crictl"
            mode: '0755'
            state: file

    - name: Installer cri-dockerd
      include_tasks: tasks/install_cri_dockerd.yml

    - name: Créer le dossier des plugins CNI
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'
        
    - name: Créer le répertoire /etc/cni/net.d
      file:
        path: /etc/cni/net.d
        state: directory
        mode: '0755'

    - name: Ajouter l'utilisateur au groupe Docker
      user:
        name: "{{ ansible_user }}"  
        group: docker
        append: yes

    - name: Vérifier que l'utilisateur appartient au groupe docker
      command: id -nG
      register: user_groups
      changed_when: false

    - name: Afficher les groupes de l'utilisateur
      debug:
        msg: "L'utilisateur {{ ansible_user }} appartient aux groupes: {{ user_groups.stdout }}"

    - name: Télécharger les CNI plugins
      get_url:
        url: https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz
        dest: /tmp/cni-plugins.tgz
        mode: '0644'

    - name: Extraire les CNI plugins
      unarchive:
        src: /tmp/cni-plugins.tgz
        dest: /opt/cni/bin
        remote_src: yes

    - name: Supprimer l'archive téléchargée
      file:
        path: /tmp/cni-plugins.tgz
        state: absent


    - name: Télécharger kubectl version {{ kubectl_version }}
      get_url:
        url: "https://dl.k8s.io/release/v{{ kubectl_version }}/bin/linux/amd64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: '0755'
        force: yes

    - name: Vérifier que kubectl est bien installé
      command: kubectl version --client
      register: kubectl_check
      changed_when: false
      failed_when: kubectl_check.rc != 0

    - name: Afficher la version de kubectl
      debug:
       msg: "{{ kubectl_check.stdout }}"
    - name: Télécharger Minikube
      get_url:
        url: "https://storage.googleapis.com/minikube/releases/v{{ minikube_version }}/minikube-linux-amd64"
        dest: /usr/local/bin/minikube
        mode: "0755"
    - name: Modifier les permissions du socket Docker
      file:
        path: /var/run/docker.sock
        mode: '0666'


    - name: Démarrer Minikube avec l'utilisateur {{ user_name }}
      command: minikube start --driver=none --kubernetes-version={{ kubectl_version }}
      become: false  # Exécute la commande en tant qu'utilisateur non-root (achref)

    - name: Install Helm using snap
      command: snap install helm --classic
      
         


    - name: Ajouter le repo Helm pour Prometheus
      command: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      become_user: "{{ ansible_user }}"
    
    - name: Update le repo Helm pour Prometheus
      command: helm repo update
      become_user: "{{ ansible_user }}"
   
    - name: Installer Prometheus via Helm
      command: helm install prometheus prometheus-community/kube-prometheus-stack
      become_user: "{{ ansible_user }}"
      environment:
        KUBECONFIG: "~/.kube/config "


        
        
        
        
        
        
